use tauri::{AppHandle, Manager};
use tracing::{error, info, warn};

/// Verifica se h√° atualiza√ß√µes dispon√≠veis
#[tauri::command]
pub async fn check_for_updates(app_handle: AppHandle) -> Result<serde_json::Value, String> {
    info!("üîç Verificando atualiza√ß√µes...");
    
    let updater = app_handle.updater();
    match updater.check().await {
        Ok(update) => {
            if update.is_update_available() {
                info!("‚úÖ Atualiza√ß√£o dispon√≠vel: {}", update.latest_version());
                Ok(serde_json::json!({
                    "available": true,
                    "current_version": env!("CARGO_PKG_VERSION"),
                    "latest_version": update.latest_version(),
                    "body": update.body().map_or("Nova vers√£o dispon√≠vel".to_string(), |v| v.clone()),
                    "date": update.date().map_or("".to_string(), |d| d.to_string())
                }))
            } else {
                info!("‚ÑπÔ∏è Nenhuma atualiza√ß√£o dispon√≠vel");
                Err("Nenhuma atualiza√ß√£o dispon√≠vel".to_string())
            }
        }
        Err(e) => {
            error!("‚ùå Erro ao verificar atualiza√ß√µes: {}", e);
            Err(format!("Erro ao verificar atualiza√ß√µes: {}", e))
        }
    }
}

/// Baixa e instala a atualiza√ß√£o dispon√≠vel
#[tauri::command]
pub async fn install_update(app_handle: AppHandle) -> Result<String, String> {
    info!("üì• Iniciando instala√ß√£o de atualiza√ß√£o...");
    
    let updater = app_handle.updater();
    match updater.check().await {
        Ok(update) => {
            if update.is_update_available() {
                info!("üöÄ Baixando atualiza√ß√£o: {}", update.latest_version());
                
                match update.download_and_install().await {
                    Ok(_) => {
                        info!("‚úÖ Atualiza√ß√£o instalada com sucesso!");
                        info!("üîÑ Reiniciando aplica√ß√£o...");
                        
                        // Reiniciar a aplica√ß√£o
                        app_handle.restart();
                        
                        Ok("Atualiza√ß√£o instalada com sucesso! A aplica√ß√£o ser√° reiniciada.".to_string())
                    }
                    Err(e) => {
                        error!("‚ùå Erro ao instalar atualiza√ß√£o: {}", e);
                        Err(format!("Erro ao instalar atualiza√ß√£o: {}", e))
                    }
                }
            } else {
                warn!("‚ö†Ô∏è Nenhuma atualiza√ß√£o dispon√≠vel para instalar");
                Err("Nenhuma atualiza√ß√£o dispon√≠vel".to_string())
            }
        }
        Err(e) => {
            error!("‚ùå Erro ao verificar atualiza√ß√µes: {}", e);
            Err(format!("Erro ao verificar atualiza√ß√µes: {}", e))
        }
    }
}

/// Obt√©m informa√ß√µes sobre a vers√£o atual
#[tauri::command]
pub async fn get_app_version() -> Result<String, String> {
    Ok(env!("CARGO_PKG_VERSION").to_string())
}

/// Obt√©m informa√ß√µes sobre a vers√£o mais recente dispon√≠vel
#[tauri::command]
pub async fn get_latest_version(app_handle: AppHandle) -> Result<String, String> {
    let updater = app_handle.updater();
    match updater.check().await {
        Ok(update) => {
            if update.is_update_available() {
                Ok(update.latest_version().to_string())
            } else {
                Ok(env!("CARGO_PKG_VERSION").to_string())
            }
        }
        Err(e) => {
            error!("‚ùå Erro ao verificar vers√£o mais recente: {}", e);
            Err(format!("Erro ao verificar vers√£o: {}", e))
        }
    }
}

/// Verifica atualiza√ß√µes automaticamente na inicializa√ß√£o
pub async fn check_updates_on_startup(app_handle: &AppHandle) {
    info!("üöÄ Verificando atualiza√ß√µes na inicializa√ß√£o...");
    
    let updater = app_handle.updater();
    match updater.check().await {
        Ok(update) => {
            if update.is_update_available() {
                info!("üì¢ Nova vers√£o dispon√≠vel: {} (atual: {})", 
                      update.latest_version(), 
                      env!("CARGO_PKG_VERSION"));
                
                // Emitir evento para o frontend
                app_handle.emit_all("update_available", serde_json::json!({
                    "current_version": env!("CARGO_PKG_VERSION"),
                    "latest_version": update.latest_version(),
                    "body": update.body().map_or("Nova vers√£o dispon√≠vel".to_string(), |v| v.clone()),
                    "date": update.date().map_or("".to_string(), |d| d.to_string())
                })).unwrap_or_else(|e| {
                    error!("Erro ao emitir evento de atualiza√ß√£o: {}", e);
                });
            } else {
                info!("‚úÖ Aplica√ß√£o est√° atualizada");
            }
        }
        Err(e) => {
            warn!("‚ö†Ô∏è Erro ao verificar atualiza√ß√µes na inicializa√ß√£o: {}", e);
        }
    }
}

/// Teste simples do sistema de updater
#[tauri::command]
pub async fn test_updater_simple(app_handle: AppHandle) -> Result<String, String> {
    info!("üß™ Testando sistema de updater...");
    
    // Testar se o updater est√° dispon√≠vel
    let updater = app_handle.updater();
    info!("‚úÖ Updater obtido com sucesso");
    
    // Tentar verificar atualiza√ß√µes (pode falhar se n√£o houver servidor)
    match updater.check().await {
        Ok(update) => {
            if update.is_update_available() {
                Ok(format!("Atualiza√ß√£o dispon√≠vel: {}", update.latest_version()))
            } else {
                Ok("Nenhuma atualiza√ß√£o dispon√≠vel".to_string())
            }
        }
        Err(e) => {
            info!("‚ö†Ô∏è Erro ao verificar atualiza√ß√µes (esperado se n√£o houver servidor): {}", e);
            Ok(format!("Sistema de updater funcionando, mas sem servidor: {}", e))
        }
    }
}
