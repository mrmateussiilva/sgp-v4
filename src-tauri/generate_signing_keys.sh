#!/bin/bash

# ========================================
# SCRIPT PARA GERAR CHAVES DE ASSINATURA - SGP v4
# ========================================

set -e  # Parar em caso de erro

echo "üîê Gerando chaves de assinatura para o SGP v4..."

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERRO]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCESSO]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[AVISO]${NC} $1"
}

# Verificar se estamos no diret√≥rio correto
if [ ! -f "Cargo.toml" ]; then
    error "Execute este script no diret√≥rio src-tauri/"
    exit 1
fi

# Criar diret√≥rio para chaves
mkdir -p keys

# Gerar chave privada
log "üîë Gerando chave privada..."
openssl genrsa -out keys/sgp-v4-private.key 4096
success "Chave privada gerada: keys/sgp-v4-private.key"

# Gerar chave p√∫blica
log "üîë Gerando chave p√∫blica..."
openssl rsa -in keys/sgp-v4-private.key -pubout -out keys/sgp-v4-public.key
success "Chave p√∫blica gerada: keys/sgp-v4-public.key"

# Gerar chave p√∫blica em formato base64 para o tauri.conf.json
log "üîë Convertendo chave p√∫blica para base64..."
PUBLIC_KEY_BASE64=$(openssl rsa -in keys/sgp-v4-private.key -pubout | base64 -w 0)
success "Chave p√∫blica em base64 gerada"

# Criar arquivo de configura√ß√£o
log "üìù Criando arquivo de configura√ß√£o..."
cat > keys/tauri-updater-config.txt << EOF
# Configura√ß√£o do Updater - SGP v4
# =================================

# Chave p√∫blica (para tauri.conf.json)
PUBLIC_KEY_BASE64="$PUBLIC_KEY_BASE64"

# Chave privada (para assinar atualiza√ß√µes)
PRIVATE_KEY_PATH="keys/sgp-v4-private.key"

# Chave p√∫blica (para verifica√ß√£o)
PUBLIC_KEY_PATH="keys/sgp-v4-public.key"

# Como usar:
# 1. Copie PUBLIC_KEY_BASE64 para o campo "pubkey" no tauri.conf.json
# 2. Use PRIVATE_KEY_PATH para assinar as atualiza√ß√µes
# 3. Mantenha as chaves seguras e n√£o as compartilhe

# Exemplo de uso no tauri.conf.json:
# "pubkey": "$PUBLIC_KEY_BASE64"

# Comando para assinar uma atualiza√ß√£o:
# tauri signer sign -k keys/sgp-v4-private.key -f update.tar.gz
EOF

success "Arquivo de configura√ß√£o criado: keys/tauri-updater-config.txt"

# Criar script de assinatura
log "üìù Criando script de assinatura..."
cat > keys/sign_update.sh << 'EOF'
#!/bin/bash

# Script para assinar atualiza√ß√µes do SGP v4
# Uso: ./sign_update.sh <arquivo-da-atualiza√ß√£o>

if [ $# -eq 0 ]; then
    echo "Uso: $0 <arquivo-da-atualiza√ß√£o>"
    echo "Exemplo: $0 sgp-v4-update.tar.gz"
    exit 1
fi

UPDATE_FILE="$1"
PRIVATE_KEY="sgp-v4-private.key"

if [ ! -f "$UPDATE_FILE" ]; then
    echo "Erro: Arquivo $UPDATE_FILE n√£o encontrado"
    exit 1
fi

if [ ! -f "$PRIVATE_KEY" ]; then
    echo "Erro: Chave privada $PRIVATE_KEY n√£o encontrada"
    exit 1
fi

echo "üîê Assinando arquivo: $UPDATE_FILE"
echo "üîë Usando chave: $PRIVATE_KEY"

# Assinar o arquivo
openssl dgst -sha256 -sign "$PRIVATE_KEY" -out "${UPDATE_FILE}.sig" "$UPDATE_FILE"

echo "‚úÖ Arquivo assinado: ${UPDATE_FILE}.sig"
echo "üìã Para verificar a assinatura:"
echo "   openssl dgst -sha256 -verify sgp-v4-public.key -signature ${UPDATE_FILE}.sig $UPDATE_FILE"
EOF

chmod +x keys/sign_update.sh
success "Script de assinatura criado: keys/sign_update.sh"

# Criar script de verifica√ß√£o
log "üìù Criando script de verifica√ß√£o..."
cat > keys/verify_update.sh << 'EOF'
#!/bin/bash

# Script para verificar assinaturas de atualiza√ß√µes do SGP v4
# Uso: ./verify_update.sh <arquivo-da-atualiza√ß√£o> <arquivo-de-assinatura>

if [ $# -ne 2 ]; then
    echo "Uso: $0 <arquivo-da-atualiza√ß√£o> <arquivo-de-assinatura>"
    echo "Exemplo: $0 sgp-v4-update.tar.gz sgp-v4-update.tar.gz.sig"
    exit 1
fi

UPDATE_FILE="$1"
SIGNATURE_FILE="$2"
PUBLIC_KEY="sgp-v4-public.key"

if [ ! -f "$UPDATE_FILE" ]; then
    echo "Erro: Arquivo $UPDATE_FILE n√£o encontrado"
    exit 1
fi

if [ ! -f "$SIGNATURE_FILE" ]; then
    echo "Erro: Arquivo de assinatura $SIGNATURE_FILE n√£o encontrado"
    exit 1
fi

if [ ! -f "$PUBLIC_KEY" ]; then
    echo "Erro: Chave p√∫blica $PUBLIC_KEY n√£o encontrada"
    exit 1
fi

echo "üîç Verificando assinatura de: $UPDATE_FILE"
echo "üîë Usando chave p√∫blica: $PUBLIC_KEY"

# Verificar a assinatura
if openssl dgst -sha256 -verify "$PUBLIC_KEY" -signature "$SIGNATURE_FILE" "$UPDATE_FILE"; then
    echo "‚úÖ Assinatura v√°lida!"
    exit 0
else
    echo "‚ùå Assinatura inv√°lida!"
    exit 1
fi
EOF

chmod +x keys/verify_update.sh
success "Script de verifica√ß√£o criado: keys/verify_update.sh"

# Mostrar informa√ß√µes importantes
echo ""
echo "=========================================="
success "üéâ CHAVES DE ASSINATURA GERADAS!"
echo "=========================================="
echo ""
echo "üìÅ Arquivos criados:"
echo "  - keys/sgp-v4-private.key (MANTENHA SEGURO!)"
echo "  - keys/sgp-v4-public.key"
echo "  - keys/tauri-updater-config.txt"
echo "  - keys/sign_update.sh"
echo "  - keys/verify_update.sh"
echo ""
echo "üîë Chave p√∫blica para tauri.conf.json:"
echo "  $PUBLIC_KEY_BASE64"
echo ""
echo "‚ö†Ô∏è IMPORTANTE:"
echo "  - Mantenha a chave privada SEGURA e N√ÉO a compartilhe"
echo "  - Use a chave privada apenas para assinar atualiza√ß√µes"
echo "  - A chave p√∫blica pode ser compartilhada"
echo ""
echo "üöÄ Pr√≥ximos passos:"
echo "  1. Copie a chave p√∫blica para o tauri.conf.json"
echo "  2. Configure o servidor de atualiza√ß√µes"
echo "  3. Use o script de assinatura para assinar atualiza√ß√µes"
echo ""
echo "üìã Para atualizar o tauri.conf.json:"
echo "  Substitua o campo 'pubkey' por:"
echo "  \"pubkey\": \"$PUBLIC_KEY_BASE64\""
echo ""

