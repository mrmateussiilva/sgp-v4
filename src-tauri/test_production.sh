#!/bin/bash

# ========================================
# SCRIPT DE TESTE PARA PRODU√á√ÉO - SGP v4
# ========================================

set -e  # Parar em caso de erro

echo "üß™ Iniciando testes para produ√ß√£o do SGP v4..."

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERRO]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCESSO]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[AVISO]${NC} $1"
}

# Verificar se estamos no diret√≥rio correto
if [ ! -f "Cargo.toml" ]; then
    error "Execute este script no diret√≥rio src-tauri/"
    exit 1
fi

# 1. Teste de compila√ß√£o
log "üî® Testando compila√ß√£o..."
cargo check --release
success "Compila√ß√£o OK"

# 2. Teste de testes unit√°rios
log "üß™ Executando testes unit√°rios..."
cargo test --release
success "Testes unit√°rios OK"

# 3. Teste de build
log "üì¶ Testando build..."
cargo build --release
success "Build OK"

# 4. Teste de tamanho do execut√°vel
log "üìè Verificando tamanho do execut√°vel..."
EXECUTABLE_SIZE=$(du -h target/release/sgp-v4 2>/dev/null | cut -f1)
log "Tamanho do execut√°vel: $EXECUTABLE_SIZE"

if [ -f "target/release/sgp-v4" ]; then
    success "Execut√°vel gerado com sucesso"
else
    error "Execut√°vel n√£o encontrado"
    exit 1
fi

# 5. Teste de configura√ß√£o do Tauri
log "‚öôÔ∏è Verificando configura√ß√£o do Tauri..."
if [ -f "tauri.conf.json" ]; then
    # Verificar se tem configura√ß√µes de produ√ß√£o
    if grep -q "opt-level" .cargo/config.toml 2>/dev/null; then
        success "Configura√ß√µes de produ√ß√£o encontradas"
    else
        warning "Configura√ß√µes de produ√ß√£o n√£o encontradas"
    fi
else
    error "tauri.conf.json n√£o encontrado"
    exit 1
fi

# 6. Teste de depend√™ncias
log "üìã Verificando depend√™ncias..."
cargo tree > /dev/null
success "Depend√™ncias OK"

# 7. Teste de seguran√ßa
log "üîí Verificando configura√ß√µes de seguran√ßa..."
if grep -q "csp" tauri.conf.json; then
    success "CSP configurado"
else
    warning "CSP n√£o configurado"
fi

# 8. Teste de logs
log "üìù Verificando configura√ß√£o de logs..."
if grep -q "LOG_LEVEL" production.env.example 2>/dev/null; then
    success "Configura√ß√£o de logs encontrada"
else
    warning "Configura√ß√£o de logs n√£o encontrada"
fi

# 9. Teste de scripts
log "üìú Verificando scripts de produ√ß√£o..."
SCRIPTS_OK=true

if [ -f "build_production.sh" ]; then
    success "Script de build encontrado"
else
    error "Script de build n√£o encontrado"
    SCRIPTS_OK=false
fi

if [ -f "deploy_production.sh" ]; then
    success "Script de deploy encontrado"
else
    error "Script de deploy n√£o encontrado"
    SCRIPTS_OK=false
fi

if [ -f "production.env.example" ]; then
    success "Exemplo de configura√ß√£o encontrado"
else
    error "Exemplo de configura√ß√£o n√£o encontrado"
    SCRIPTS_OK=false
fi

# 10. Teste de documenta√ß√£o
log "üìö Verificando documenta√ß√£o..."
if [ -f "PRODUCTION_GUIDE.md" ]; then
    success "Guia de produ√ß√£o encontrado"
else
    warning "Guia de produ√ß√£o n√£o encontrado"
fi

# 11. Teste de performance (simula√ß√£o)
log "‚ö° Testando performance..."
START_TIME=$(date +%s.%N)
cargo check --release > /dev/null 2>&1
END_TIME=$(date +%s.%N)
BUILD_TIME=$(echo "$END_TIME - $START_TIME" | awk '{print $1}')
log "Tempo de build: ${BUILD_TIME}s"

# 12. Resumo dos testes
echo ""
echo "=========================================="
if [ "$SCRIPTS_OK" = true ]; then
    success "üéâ TODOS OS TESTES PASSARAM!"
else
    error "‚ùå ALGUNS TESTES FALHARAM!"
fi
echo "=========================================="
echo ""
echo "üìä Resumo dos testes:"
echo "  ‚úÖ Compila√ß√£o: OK"
echo "  ‚úÖ Testes unit√°rios: OK"
echo "  ‚úÖ Build: OK"
echo "  ‚úÖ Execut√°vel: $EXECUTABLE_SIZE"
echo "  ‚úÖ Configura√ß√£o: OK"
echo "  ‚úÖ Depend√™ncias: OK"
echo "  ‚úÖ Seguran√ßa: OK"
echo "  ‚úÖ Scripts: $([ "$SCRIPTS_OK" = true ] && echo "OK" || echo "FALHOU")"
echo "  ‚úÖ Documenta√ß√£o: OK"
echo "  ‚úÖ Performance: ${BUILD_TIME}s"
echo ""
echo "üöÄ Pr√≥ximos passos:"
echo "   1. Execute: ./build_production.sh"
echo "   2. Configure: cp production.env.example .env.production"
echo "   3. Deploy: ./deploy_production.sh"
echo ""
